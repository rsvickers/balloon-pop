#!/usr/bin/env node
const { printAlert, clearScreen, colors, printInfo, printSuccess, printBanner, printFSLogo, printSECLogo } = require("./console-utils");
const { setupGit, initializeProject, writeLog, getOrSetGitUser } = require("./utils");
let { execSync } = require("child_process");
const inquirer = require("inquirer");
const CURR_DIR = process.cwd();

let projectName = "fs-journal";
let journals = {
  'Fullstack': 'fs-journal',
  'Cyber Security': 'sec-journal'
}

async function create() {
  let fullname = ''
  let ghname = ''
  let ghemail = ''

  try {
    // @ts-ignore
    const answers = await inquirer.prompt({
      name: "project-choice",
      type: "list",
      message: "Which course are you taking?",
      choices: ['Fullstack', 'Cyber Security']
    })
    projectName = journals[answers["project-choice"]]
  }
  catch (e) {
    return console.error('[!] - Journal not created you will have to re-run the tool to create the journal', e)
  }

  // SETUP GIT_USER
  try {
    let gitUser = await getOrSetGitUser()
    if (!gitUser) {
      gitUser = await setupGit()
    }

    fullname = gitUser.fullname
    ghname = gitUser.ghname
    ghemail = gitUser.ghemail

  } catch (e) {
    return console.error('[!] - Error setting up your git user, try running bcw setup before re-running the journal tool', e)
  }

  // CLONE PROJECT
  try {
    clearScreen();
    console.group(colors.FgMagenta, "---INITIALIZING PROJECT---");
    printInfo(`--------------------\n[+] CREATING PROJECT\n[+] ${projectName}`);

    execSync(`npx create-project ${projectName} codeworks-templates/${projectName}#main --ghname="${ghname}" --ghemail="${ghemail}" --fullname="${fullname}"`);

  } catch (error) {
    printAlert('[!] - Error Creating the journal project. You can manually create this project by running the following command')

    printInfo(`npx create-project ${projectName} codeworks-templates/${projectName}#main --ghname="${ghname}" --ghemail="${ghemail}" --fullname="${fullname}"`)
    console.log('------------------------------')
    console.log('After running the above command you can setup git with the following commands')
    return printGitCommands(ghname);
  }

  // GIT INITIALIZE PROJECT
  try {
    process.chdir(projectName);
    await initializeProject(projectName);
  } catch (e) {
    printAlert(`[!] Unable to initialize project please cd into the project and run the following commands`);
    return printGitCommands(ghname);
  }


  console.groupEnd()
  projectName.includes('fs')
    ? printFSLogo()
    : printSECLogo()

  printSuccess("[+] Journal created successfully to get started");
  printSuccess("[+] Here you will be completing daily reflections");
  printSuccess("[+] Taking notes, completing weekly quizzes");
  printSuccess("[+] And more!");
  printSuccess("[+] Happy Journaling!");
  printSuccess(`[~] cd ${projectName}`);
  writeLog(`${CURR_DIR}\\${projectName}`, projectName)
  console.groupEnd();
}

function printGitCommands(ghname) {
  printInfo('git init');
  printInfo('git add .');
  printInfo(`git remote add origin https://github.com/${ghname}/${projectName}.git`);
  printInfo('git commit -m "project initialized"');
  printInfo('git branch -M main');
  printInfo('git push -f -u origin main');
}

async function start() {
  try {
    await create()
  } catch (e) {
    console.error(e)
  }
}

start()
