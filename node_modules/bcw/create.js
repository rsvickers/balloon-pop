#!/usr/bin/env node
let slugify = require('slugify');
let inquirer = require("inquirer");
const { createDefaultApp } = require("./lib/createDefaultApp");
const { createNodeFullStack } = require("./lib/createNodeFullStack");
const { createDotnetFullstack, createDotnetAuth } = require("./lib/createDotnetVue");
const { printAlert, clearScreen, colors, printWarning, printInfo, printSuccess } = require("./console-utils");
const { writeLog, initializeProject } = require("./utils");
const { createMVCAuth } = require('./lib/createMVCAuth.js');

const templates = [
  "mvc",
  "mvc-auth",
  "node-server-auth0",
  "express-mvc",
  "express-vue",
  "express-react",
  "vue-starter",
  "react-starter",
  "dotnet-auth",
  "dotnet-vue",
  "dotnet-react",
];
const CURR_DIR = process.cwd();

//prompts and the name of properties added to the answers object
const prompts = [
  {
    name: "project-choice",
    type: "list",
    message: "What project template would you like to generate?",
    choices: templates
  },
  {
    name: "project-name",
    type: "input",
    message: "Project name:",
    validate(input) {
      return /^([A-Za-z\-\_\d])+$/.test(input)
        ? true
        : "Project name may only include letters, numbers, underscores and dashes.";
    }
  },
  {
    name: "initialize",
    type: "confirm",
    message: "Initialize git repository:"
  }
];

async function create() {
  // @ts-ignore
  const answers = await inquirer.prompt(prompts)
  let projectChoice = answers["project-choice"];
  let projectName = answers["project-name"];
  let initialize = answers["initialize"];
  // @ts-ignore
  projectName = slugify(projectName);
  try {
    clearScreen();
    console.group(colors.FgMagenta, "---INITIALIZING PROJECT---");
    printInfo(`--------------------\n[+] CREATING PROJECT\n[+] ${projectName}`);
    let message = ''
    switch (projectChoice) {
      case 'mvc-auth':
        message = await createMVCAuth(CURR_DIR, projectName)
        break;
      case 'express-mvc':
      case 'express-vue':
      case 'express-react':
        message = await createNodeFullStack(CURR_DIR, projectName, projectChoice)
        break;
      case 'dotnet-auth':
        message = await createDotnetAuth(CURR_DIR, projectName)
        break;
      case 'dotnet-vue':
      case 'dotnet-react':
        message = await createDotnetFullstack(CURR_DIR, projectName, projectChoice)
        break;
      default:
        message = await createDefaultApp(CURR_DIR, projectChoice, projectName)
    }
    try {
      writeLog(`${CURR_DIR}\\${projectName}`, projectName)
    } catch (e) {
      console.warn('[~] Launch settings log file ', e.message)
    }
    printSuccess("[+] Project Created Successfully");
    printWarning(message);
    console.groupEnd();
    if (initialize) {
      initializeProject(projectName)
    }
  } catch (e) {
    printAlert(`[!] ${e.message}`, e);
  }
}

async function start() {
  try {
    await create()
  } catch (e) {
    console.error(e)
  }
}

start()

