#!/usr/bin/env node
var basePath = process.cwd();
var http = require("http");
var fs = require("fs");
var mime = require("mime");
var path = require("path");
const { colors } = require("./console-utils");
var port = 8080;

try {
  if (process.argv) {
    process.argv.find((a, i) => {
      if (a.includes("-p")) {
        port = Number(process.argv[i + 1]);
        return true;
      }
    });
  }
} catch (error) {
  console.error(error);
}

let server = http.createServer(async function (req, res) {

  if (req.method !== "GET") {
    const responseBody = `Forbidden Method: ${req.method}`;

    res.writeHead(403, {
      "Content-Type": "plain/text",
      "Content-Length": Buffer.byteLength(responseBody),
    });

    return res.end(responseBody);
  }

  const url = new URL(req.url, `http://${req.headers.host}`);
  let pathname = url.pathname;

  // If the pathname ends with '/', append 'index.html'.
  if (pathname.endsWith("/")) {
    pathname += "index.html";
  }

  try {
    // Try to read the given resource into a Buffer.
    const resourcePath = path.join(basePath, pathname);
    let responseBody = await fs.promises.readFile(resourcePath);
    res.writeHead(200, {
      "Content-Type": mime.getType(resourcePath),
      "Content-Length": responseBody.length,
    });
    return res.end(responseBody);

  } catch (e) {
    // Respond to all errors with a 404 response.
    const responseBody = `Cannot GET resource: ${pathname}`;

    res.writeHead(404, {
      "Content-Type": "plain/text",
      "Content-Length": Buffer.byteLength(responseBody),
    });

    return res.end(responseBody);
  }

});

function startServer() {
  server.listen(port, () => {
    console.log(`${colors.FgGreen}---CODEWORKS DEV SERVER-------------------------------------------------------${colors.Reset}
Starting static file server${colors.FgYellow}${basePath}${colors.Reset}
  Available on:  ${colors.FgCyan}http://localhost:${port}${colors.Reset}
  Quit: ${colors.FgMagenta}ctrl+c${colors.Reset}
`);
  });

  process.on('SIGINT', function () {
    console.log(colors.FgRed, '  [!] Server stopped.', colors.Reset);
    process.exit();
  });

  process.on('SIGTERM', function () {
    console.log(colors.FgRed, '  [!] Server stopped.', colors.Reset);
    process.exit();
  });

}

startServer();
