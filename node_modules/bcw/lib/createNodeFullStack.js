let fs = require("fs");
let { execSync } = require("child_process");
let { colors, startSpinner, stopSpinner } = require('../console-utils');
const { generateWorkspace } = require("./generateWorkspace");
const { generatePackageJson } = require("./generatePackageJson");

const templates = {
  'express-mvc': 'mvc-auth#views',
  'express-vue': 'vue-starter#main',
  'express-react': 'react-starter#main'
}


async function createNodeFullStack(CURR_DIR, projectName, projectChoice = '') {
  return new Promise((resolve, reject) => {
    try {
      let client = templates[projectChoice]
      console.group()
      let projPath = `${CURR_DIR}/${projectName}`;
      fs.mkdirSync(projPath);
      process.chdir(projPath);

      execSync(`npx create-project ${projectName}.client codeworks-templates/${client}`);
      execSync(`npx create-project ${projectName} codeworks-templates/node-server-auth0`);
      let envContents = ["NODE_ENV=dev", "CONNECTION_STRING=", "PORT=", "AUTH_DOMAIN=", "AUTH_AUDIENCE=", "AUTH_CLIENT_ID="];
      fs.writeFileSync(`${projPath}/${projectName}/.env`, envContents.join("\n"), "utf8");
      fs.writeFileSync(`${projPath}/${projectName}.code-workspace`, generateWorkspace(projectName), "utf8");
      fs.writeFileSync(`${projPath}/package.json`, generatePackageJson(projectName), "utf8");
      console.groupCollapsed(colors.FgMagenta, "  [~] Installing Dependencies", colors.Reset);
      startSpinner();
      execSync('npm run setup:app')
      stopSpinner();
      console.groupEnd();
      resolve(`
        [#] Open Project Workspace
        [#] cd into ${projectName}
        [#] type 'code ${projectName}.code-workspace'`)
      console.groupEnd();
    } catch (e) {
      reject(e)
    }
  })
}

exports.createNodeFullStack = createNodeFullStack;
